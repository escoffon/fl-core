Description:
  This generator installs support for the comments subsystem.

  - It copies the comment migration file to the application's db/migrate directory.
  - It creates a comments controller file.
  - It registers a route for the comments controller in config/routes.rb.
  - It installs Javascript support for the Fl::Core::Comment object and an API service to the controller API.

Options:
  --object_class OBJECT_CLASS
    The name of the comment object class; this is a simple subclass of the comment implementation class
    for the requested ORM (which, currently, is aways 'active_record').
    Defaults to 'Fl::Core::Comment::Comment'.
  --service_class SERVICE_CLASS
    The name of the comment service object class; this is a simple subclass of the comment service class
    that overrides the name of the comment object class above.
    Defaults to 'Fl::Core::Comment::Service'.
  --controller_class CONTROLLER_CLASS
    The name of the controller class.
    Defaults to 'Fl::Core::CommentsController'.

Example:
  Given this command:
    rails generate fl:core:comments:install
  the generator performs the following operations:
  
  - Create the migration file
      db/migrate/TS_create_fl_core_comments.fl_core.rb
    where TS is a timestamp.
  - Create the comment object class
      app/extensions/fl/core/comment/comment.rb
  - Create the service object class
      app/extensions/fl/core/comment/service.rb
  - Create the controller file
      app/controllers/fl/core/comments_controller.rb
  - Adds a route for that controller in config/routes.rb.
  - Adds vendor/javascript/fl/core/comment.js for the Fl::Core::Comment::Comment object.
  - Adds vendor/javascript/fl/core/comments_api_service.js For the comment API service object.

  With a custom class names:
    rails generate fl:core:comments:install --object_class My::Comment::Comment --service_class My::Comment::Service --controller_class My::CommentsController
  the generator performs the following operations:
  
  - Create the migration file
      db/migrate/TS_create_fl_core_comments.fl_core.rb
  - Create the comment object class
      app/extensions/my/comment/comment.rb
  - Create the service object class
      app/extensions/my/comment/service.rb
  - Create the controller file
      app/controllers/my/comments_controller.rb
  - Adds a route for that controller in config/routes.rb.
  - Adds vendor/javascript/fl/core/comment.js for the My::Comment::Comment object.
  - Adds vendor/javascript/my/custom_comments_api_service.js For the comment API service object.

Post install:
  After the generator has run, you will have to perform a few additional steps:

  - Run the migration (rake db:migrate).
  - Examine the generated controller file and make necessary changes for your environment.
    The most common change is to add authentication; see the comments in the code for hints.
  - Add commentable functionality to existing classes. For example, to turn on comments
    in class MyClass, add the lines
      include Fl::Core::Comment::Commentable
      include Fl::Core::Comment::ActiveRecord::Commentable
      has_comments 
    to the class definition:
      class MyClass < ApplicationRecord
        include Fl::Core::Comment::Commentable
        include Fl::Core::Comment::ActiveRecord::Commentable
        has_comments 
      end

    The `has_comments` directive accepts three configuration parameters:
      - :orm is the ORM to use; currently we only support `activerecord`, but we have an
        experimental Neo4j implementation.
      - :summary is the method that collects a comment summary; this is used in some
        components to store recent comments with a commentable data.
	The value is the name of a method in the commentable, or a Proc, called by the
	`comment_summary` method.
	Defaults to :title.
      - :counter controls automatic tracking of comment counts for a commentable.
        See below for details.
	Defaults to `false`, so no comment count tracking.
    - Add support for automatic tracking of comment counts, if desired.
  - Make sure that the commentable class adds access control checks for the two comment
    permissions Fl::Core::Comment::Permission::IndexComments and
    Fl::Core::Comment::Permission::CreateComments, if desired.

Tracking comment counts
  If you set the value of the :counter option to `true` or to the name of a column in the
  commentable's table, the comment subsystem turns on some code that uses that column to
  keep a count of comments associated with the commentable. This gives you the comment count
  as an attribute in the commentable, at the (slight) cost of additional SQL access when
  comments are created and destroyed. Comments themselves are also set up as commentables,
  so that subcomments are supported; comment count tracking is turned on in comments.

  To use this functionality, set the value of :counter to the name of the integer column in
  the commentable's object table, or to `true` (in which case the column name is `num_comments`).
  Then, create a migration to add the column to the commentable's object table.
